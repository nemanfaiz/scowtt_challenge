// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Main User model
model User {
  id            String    @id @default(cuid()) // Unique identifier
  name          String?   // From Google Auth
  email         String?   @unique // From Google Auth
  emailVerified DateTime? // From Google Auth
  image         String?   // Profile picture URL from Google
  favoriteMovie String?   // User's favorite movie
  isFirstLogin  Boolean   @default(true)
  movieFacts    MovieFact[] // Relation to movie facts
  accounts      Account[] // Required for OAuth
  sessions      Session[] // Required for session management
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Store generated movie facts (optional - for caching/history)
model MovieFact {
  id        String   @id @default(cuid())
  fact      String   @db.Text // Using Text type for longer content
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId]) // Add index for better query performance
}

// Required for OAuth (NextAuth.js)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// Required for session management (NextAuth.js)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Required for email verification (NextAuth.js)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}